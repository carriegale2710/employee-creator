# For more information see:
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven
# https://www.baeldung.com/ops/github-actions-deploy-ec2

name: Spring App EC2 Deploy

on:
  push:
    branches: ["main"]
    paths: ["employee/**"] # Only run if something in back-end changes

  pull_request:
    branches: ["main"]
    paths: ["employee/**"]

  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout source
        uses: actions/checkout@v4

      - name: ‚òï Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: maven

      - name: üî® Build Spring Boot application
        run: |
          cd employee
          mvn clean install
          echo "‚úÖ Build completed successfully"
          ls -lh target/employee-0.0.1-SNAPSHOT.jar

      - name: üöÄ Deploy to EC2 via SSH
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ec2-user
          DB_NAME: ${{ secrets.DB_NAME }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASS: ${{ secrets.MYSQL_PASS }}
        run: |
          # Save SSH key to file and set permissions
          echo "$EC2_SSH_KEY" > ec2-key.pem
          chmod 600 ec2-key.pem

          # Test network connectivity first
          echo "üîç Testing network connectivity to EC2 instance..."
          echo "EC2_HOST: $EC2_HOST"
          ping -c 3 $EC2_HOST || echo "‚ö†Ô∏è Ping failed, but SSH might still work"

          # Test SSH connectivity with timeout
          echo "üîê Testing SSH connectivity..."
          timeout 30 ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o ServerAliveInterval=5 -o ServerAliveCountMax=3 -i ec2-key.pem ${EC2_USER}@${EC2_HOST} "echo 'SSH connection successful'" || {
            echo "‚ùå SSH connection failed!"
            echo "Troubleshooting information:"
            echo "- Check if EC2 instance is running"
            echo "- Verify security group allows SSH (port 22) from GitHub Actions IPs"
            echo "- Confirm EC2_HOST and EC2_SSH_KEY secrets are correct"
            exit 1
          }

          # Upload JAR file using SCP with retry logic
          echo "üì¶ Uploading JAR file to EC2..."
          for attempt in 1 2 3; do
            echo "Upload attempt $attempt/3..."
            if timeout 120 scp -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o ServerAliveInterval=5 -o ServerAliveCountMax=3 -i ec2-key.pem \
              employee/target/employee-0.0.1-SNAPSHOT.jar \
              ${EC2_USER}@${EC2_HOST}:~/employee-0.0.1-SNAPSHOT.jar; then
              echo "‚úÖ JAR file uploaded successfully on attempt $attempt"
              break
            else
              echo "‚ùå Upload attempt $attempt failed"
              if [ $attempt -eq 3 ]; then
                echo "‚ùå All upload attempts failed!"
                exit 1
              fi
              echo "‚è≥ Waiting 10 seconds before retry..."
              sleep 10
            fi
          done

          # Deploy and start application via SSH
          echo "üöÄ Deploying application on EC2..."
          timeout 180 ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o ServerAliveInterval=5 -o ServerAliveCountMax=3 -i ec2-key.pem ${EC2_USER}@${EC2_HOST} << 'EOF'
            echo "üõë Stopping existing Spring Boot application..."
            pkill -f employee-0.0.1-SNAPSHOT.jar || true
            
            echo "‚è≥ Waiting for process to terminate..."
            sleep 5
            
            echo "‚úÖ Verifying JAR file upload..."
            if [ -f "employee-0.0.1-SNAPSHOT.jar" ]; then
              echo "‚úÖ JAR file found: $(ls -lh employee-0.0.1-SNAPSHOT.jar)"
            else
              echo "‚ùå JAR file not found after upload!"
              exit 1
            fi
            
            echo "üöÄ Starting new Spring Boot application..."
            export DB_NAME="${{ secrets.DB_NAME }}"
            export MYSQL_USER="${{ secrets.MYSQL_USER }}"
            export MYSQL_PASS="${{ secrets.MYSQL_PASS }}"
            
            nohup java -jar employee-0.0.1-SNAPSHOT.jar > app.log 2>&1 &
            echo "üìù Application started in background, PID: $!"
            
            echo "‚è≥ Waiting for application to initialize..."
            sleep 15
            
            echo "üîç Checking if application is running..."
            if pgrep -f employee-0.0.1-SNAPSHOT.jar > /dev/null; then
              echo "‚úÖ Application is running successfully!"
              echo "üìä Process details:"
              pgrep -f employee-0.0.1-SNAPSHOT.jar | head -5
            else
              echo "‚ùå Application failed to start!"
              echo "üìã Last 20 lines of application log:"
              tail -20 app.log || echo "No log file found"
              exit 1
            fi
            
            echo "üéâ Deployment completed successfully!"
            echo "üìÑ Check logs with: tail -f app.log"
            echo "üîç Monitor process with: ps aux | grep employee"
          EOF

          # Clean up SSH key
          rm -f ec2-key.pem
