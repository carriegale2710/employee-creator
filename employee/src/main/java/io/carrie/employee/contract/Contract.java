package io.carrie.employee.contract;

import java.math.BigDecimal;
import java.time.LocalDate;

import org.hibernate.annotations.*;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import io.carrie.employee.contract.enums.ContractType;
import io.carrie.employee.contract.enums.Department;
import io.carrie.employee.employee.Employee;

import jakarta.persistence.*;
import jakarta.persistence.Table;
import jakarta.validation.constraints.*;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.Getter;
import lombok.ToString;

//Lombok
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@ToString

@Entity
@Table(name = "contracts")
public class Contract {

    // Validation goal: Database-level constraints

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @ManyToOne
    @JoinColumn(name = "employee_id", nullable = false)
    @OnDelete(action = OnDeleteAction.CASCADE) // !NOTE associated contracts get deleted too
    @JsonIgnoreProperties({ "contracts" }) // !NOTE - Prevents circular references
    @ToString.Exclude // lombok
    private Employee employee;

    @Enumerated(EnumType.STRING)
    @Column(name = "department")
    private Department department;

    @Enumerated(EnumType.STRING)
    @Column(name = "contract_type")
    private ContractType contractType;

    @Column
    @DecimalMin(value = "0.01", message = "Salary must be greater than zero")
    private BigDecimal salaryAmount;

    @Column
    @Min(1)
    @Max(40)
    private Integer hoursPerWeek;

    @Column
    private LocalDate startDate;

    @Column
    private LocalDate endDate;

    // SECTION: Custom business logic methods - not generated by Lombok

    // NOTE - virtual field for front-end
    @JsonProperty("isActive")
    public Boolean isActive() {

        LocalDate endDateInput = this.endDate;
        LocalDate today = LocalDate.now();

        boolean isActive = false;

        if (endDateInput == null) {
            isActive = true; // !NOTE - logic: this contract is ongoing indefinitely
        } else if (endDateInput.isBefore(today)) {
            isActive = true; // !NOTE - logic: this contract has not expired yet
        }

        return isActive;
    }

}